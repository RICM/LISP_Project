/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;}PARSER_BEGIN(GrammaireLISP)package reader;

import lisp.*;
import exception.*;
import java.io.*;
import java.util.*;

public class GrammaireLISP{
  
	/** le support de lecture */
	protected static java.io.Reader in = new BufferedReader(new InputStreamReader (System.in));
	
	/** lecture d'une S-EXPR au terminal
	 *  @return Sexpr : la Sexpr construite.
	 *  @throws LispException une erreur de syntaxe
	 */
 
	public static _Sexpr read() throws LispException, ParseException{
    	/*Scanner scan = new Scanner(System.in);
		String str = scan.nextLine();
		System.out.println(str);*/
		_Sexpr toReturn = null; //TO BE MODIFIED
		
		/*try {*/
			toReturn = SEXPR();
		/*}/* catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} //TO BE MODIFIED
		
    	/*try{
	    }catch(Exception exc){
      		throw (LispException) exc;
    	}*/
		return toReturn;
  	}
  
	
	/** lecture d'une S-EXPRs à partir de la chaine
	 * @param s : le nom du fichier
	 * @return Sexpr : la Sexpr construite
	 * @throws LispException une erreur de syntaxe
	 */
	public static _Sexpr read(String s) throws LispException, ParseException{

		_Sexpr toReturn = null; //TO BE MODIFIED

		/*try {*/
		  	ReInit(new ByteArrayInputStream(s.getBytes()));
			toReturn = SEXPR();
		/*}/* catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} //TO BE MODIFIED
		
	    /*try{
	    }catch(Exception exc){
	      throw (LispException) exc;
	    }*/
	    
		return toReturn;
	}
	
	/** évaluation de la séquence S-EXPRs à partir du fichier s
	 *  @param s : le nom du fichier
	 *  @return Sexpr : synbole du nom du fichier
	 *  @throws LispException une erreur de lecture
	 */
	public static _Sexpr importe(String s) throws LispException, ParseException, FileNotFoundException{

		_Sexpr toReturn = null; //TO BE MODIFIED
		
        java.io.Reader streamFile;

        /*try {*/
			streamFile = new  BufferedReader(new FileReader (s));
			ReInit(streamFile);
			toReturn = SEXPR();
		/*} /*catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} //TO BE MODIFIED
		
        /*try{
        }catch(Exception exc){
          throw (LispException) exc;
        }*/
        return toReturn;
	}}PARSER_END(GrammaireLISP)

//les caractères ignorés
SKIP :
{
	" " | "\t" | "\r" | "\n" //attention elimine la notion de fin de ligne
	| "\u0000" | "\u0001" | "\u0002" | "\u0003" | "\u0004" | "\u0005" | "\u0006" | "\u0007" 
	| "\u0008" | "\u000B" | "\u000C" | "\u000E" | "\u000F" | "\u0010" | "\u0011" | "\u0012"
	| "\u0013" | "\u0014" | "\u0015" | "\u0016" | "\u0017" | "\u0018" | "\u0019" | "\u001A"
	| "\u001B" | "\u001C" | "\u001D" | "\u001E" | "\u001F" | "\u007F"
}

MORE :
{	
	"//" : IN_SL_COMMENT
| 	"/*" : IN_ML_COMMENT
}

<IN_SL_COMMENT> SPECIAL_TOKEN : {<SL_COMMENT: "\n" | "\r" | "\r\n"> : DEFAULT}
<IN_SL_COMMENT> SPECIAL_TOKEN : {<ML_COMMENT: "*/"> : DEFAULT}
<IN_SL_COMMENT, IN_ML_COMMENT> SKIP : { < ~[] >} // les lexemes du langage

TOKEN : /* OPERATORS */
{
  < PO : "(" >
| < PF : ")" >
| < QUOT : "'" >
| < PT: "." >
| < IDENT : (< DIGIT >)+ >
| < #DIGIT : [ "0"-"9" , "A" -"Z" , "a"-"z", "-", "." ] >
}


_Sexpr SEXPR() :
{_Sexpr se ;}
{
	< QUOT > se=SEXPR()
	{		return new Scons(new Symbol("QUOTE"), se);
	}
	
| 	se=SYMBOLE()
	{
		return se;	}
	
| 	< PO > se=DEB_LISTE()
	{
		return se;	}
}

_Sexpr SYMBOLE():
{Token car;}
{
	car = < IDENT >
	{
	  	return new Symbol(car.toString());
	}
}

_Sexpr DEB_LISTE():
{_Sexpr f,l;}
{
	l=LIST()
	{
		return l;
	}

| 	f=END_LIST()
	{		return f;
	}
}

_Sexpr LIST():
{ _Sexpr car,cdr,pairePointee;}
{
  	<PT > pairePointee=SEXPR() cdr=DEB_LISTE()
	{
	  	
			return new Scons(pairePointee, cdr);
	}
	
|  	car=SEXPR() cdr=DEB_LISTE()
  	{
  	  	/*if(car.getClass().isInstance(Scons.class) && cdr.equals(Nil.nil))
  	  		return car;
  	  	else*/
  	  		//System.out.println("Car : "+car.toString());
  	  		//System.out.println("Cdr : "+cdr.toString()+"\n");
			return new Scons(car, cdr);
	}
	
}

_Sexpr END_LIST():
{ _Sexpr car, cdr;}
{  	< PF >
  	{  	  return Nil.nil;
 	}
}

